[
  {
    "question": "CSR과 SSR의 차이를 설명해주세요.",
    "category": "프론트엔드",
    "answers": [
      {
        "type": "good",
        "content": "CSR(Client Side Rendering)은 브라우저에서 자바스크립트로 페이지를 렌더링하는 방식으로, 초기 로딩이 느릴 수 있지만 이후 라우팅이나 사용자 상호작용이 빠릅니다. 반면 SSR(Server Side Rendering)은 서버에서 HTML을 렌더링해 클라이언트에 전달하는 방식으로, 초기 화면 표시 속도가 빠르고 SEO에 유리합니다. 프로젝트의 목적이나 규모에 따라 적합한 방식을 선택합니다."
      },
      {
        "type": "medium",
        "content": "CSR은 브라우저가 화면을 만들어주는 방식이고, SSR은 서버가 직접 HTML을 만들어서 보내주는 걸로 알고 있습니다. CSR은 싱글 페이지 애플리케이션에서 많이 쓰는 것 같습니다."
      },
      {
        "type": "bad",
        "content": "CSR은 서버에서 화면을 만들어주는 거고, SSR은 자바스크립트로 렌더링한다고 생각했는데 잘 모르겠습니다."
      }
    ]
  },
  {
    "question": "Virtual DOM의 개념과 작동 방식을 설명해주세요.",
    "category": "프론트엔드",
    "answers": [
      {
        "type": "good",
        "content": "Virtual DOM은 실제 DOM의 가벼운 복사본으로, React 같은 프레임워크에서 상태 변경 시 먼저 Virtual DOM에서 변경을 적용한 뒤 실제 DOM과 비교(diff)하여 필요한 부분만 효율적으로 업데이트합니다. 이를 통해 전체 DOM을 반복적으로 렌더링하지 않고, 성능을 크게 향상시킬 수 있습니다."
      },
      {
        "type": "medium",
        "content": "Virtual DOM은 실제 DOM 대신에 메모리상에 가상의 DOM을 만들어서, 변경 사항이 있을 때 성능을 올릴 수 있게 해주는 개념으로 알고 있습니다."
      },
      {
        "type": "bad",
        "content": "Virtual DOM은 DOM을 미리 복사해 두는 것이라고만 알고 있습니다."
      }
    ]
  },
  {
    "question": "RESTful API란 무엇이며, REST 원칙을 따르지 않는 API의 예를 들어보세요.",
    "category": "백엔드",
    "answers": [
      {
        "type": "good",
        "content": "RESTful API는 자원을 URI로 표현하고, HTTP 메서드(GET, POST, PUT, DELETE 등)를 통해 자원에 대한 행위를 정의하는 아키텍처 스타일입니다. 클라이언트-서버 구조, 무상태성, 계층화 등의 원칙을 따릅니다. 예를 들어 /getUserInfo 같은 URI는 동사를 포함하므로 REST 원칙에 위배되며, /users/{id} 형식으로 표현하는 것이 RESTful합니다. REST를 지키면 API가 일관되고 직관적으로 설계됩니다."
      },
      {
        "type": "medium",
        "content": "RESTful API는 HTTP 방식을 기반으로 만든 API인데, URL로 어떤 동작을 할지 표현하는 방식입니다. GET이나 POST처럼 요청 방식에 따라 데이터를 받아오거나 저장할 수 있고, 각 요청에 따라 서버의 동작이 달라집니다. 다만 URI에 동사를 쓰면 안 된다는 건 정확히 몰랐고, 실무에서는 /getList 같은 URL도 종종 사용하는 걸로 알고 있습니다."
      },
      {
        "type": "bad",
        "content": "RESTful API는 JSON 형식으로 데이터를 주고받는 API로 알고 있습니다. GET, POST 같은 HTTP 방식과는 관련이 있는 것 같긴 하지만, 정확히 어떤 규칙이 있는지는 잘 모르겠습니다."
      }
    ]
  },
  {
    "question": "SQL과 NoSQL의 차이점과 각각을 사용하는 예시를 말해주세요.",
    "category": "백엔드",
    "answers": [
      {
        "type": "good",
        "content": "SQL은 관계형 데이터베이스로, 고정된 스키마를 가지고 있으며 정형화된 데이터를 처리하는 데 적합합니다. 트랜잭션과 조인이 중요한 시스템에 적합합니다. NoSQL은 비정형 또는 반정형 데이터를 처리하는 데 유리하며, 스키마가 유연하고 수평 확장이 용이합니다. 예를 들어 MongoDB는 문서 기반 NoSQL로, 로그 저장, 채팅, 실시간 분석 등에서 사용됩니다."
      },
      {
        "type": "medium",
        "content": "SQL은 테이블 기반의 데이터베이스이고, NoSQL은 다양한 형태의 데이터를 저장할 수 있는 구조라고 알고 있습니다. SQL은 복잡한 쿼리 작성이 가능한 반면, NoSQL은 빠르게 데이터를 저장하고 조회하는 데 강점이 있습니다."
      },
      {
        "type": "bad",
        "content": "NoSQL은 SQL보다 최신 기술이고, 속도도 더 빠르다고 들어서 무조건 NoSQL이 좋은 줄 알았습니다. 그래서 실제 개발에서는 SQL보다 NoSQL을 써야 좋은 줄로만 알고 있었습니다."
      }
    ]
  },
  {
    "question": "과적합(Overfitting)은 무엇이고 이를 방지하는 방법은 무엇인가요?",
    "category": "AI",
    "answers": [
      {
        "type": "good",
        "content": "과적합은 모델이 학습 데이터에 지나치게 맞춰져 새로운 데이터에는 일반화하지 못하는 현상입니다. 학습 데이터의 노이즈나 특이점을 모델이 그대로 학습하게 되면서 발생합니다. 이를 방지하기 위해 정규화, Dropout, 교차 검증, 데이터 증강, 조기 종료(Early Stopping) 등의 방법을 사용할 수 있습니다."
      },
      {
        "type": "medium",
        "content": "과적합은 학습 데이터에 비해 모델이 너무 민감하게 학습하는 경우 발생합니다. 학습 성능은 높은데 테스트 데이터에서는 성능이 떨어지는 경우가 이에 해당합니다. Dropout이나 정규화 같은 방법으로 방지할 수 있다고 들었습니다."
      },
      {
        "type": "bad",
        "content": "과적합은 모델이 성능이 좋아지는 거라고 생각했어요. 훈련 데이터에 정확히 맞는 게 좋은 줄 알았는데, 테스트 성능이 떨어진다는 게 무슨 말인지 잘 모르겠어요."
      }
    ]
  },
  {
    "question": "지도학습(Supervised Learning)과 비지도학습(Unsupervised Learning)의 차이를 설명해주세요.",
    "category": "AI",
    "answers": [
      {
        "type": "good",
        "content": "지도학습은 입력 데이터와 그에 해당하는 정답(Label)을 함께 제공하여 모델이 학습하는 방식으로, 주로 분류(Classification)나 회귀(Regression)에 사용됩니다. 반면 비지도학습은 정답 없이 데이터의 패턴이나 구조를 학습하는 방식으로, 클러스터링(Clustering)이나 차원 축소(Dimensionality Reduction)에 활용됩니다."
      },
      {
        "type": "medium",
        "content": "지도학습은 정답이 있는 데이터를 기반으로 학습하는 거고, 비지도학습은 정답이 없는 데이터에서 뭔가 패턴을 찾는 방식입니다. 예를 들어 스팸 메일 분류는 지도학습이고, 고객 분류 같은 건 비지도학습으로 한다고 들었습니다."
      },
      {
        "type": "bad",
        "content": "지도학습은 사람이 직접 정답을 알려주는 거고, 비지도학습은 AI가 스스로 학습하는 방식이라고 생각했습니다. 그래서 비지도학습이 더 똑똑하다고 느껴졌습니다."
      }
    ]
  },
  {
    "question": "Docker의 개념과 사용하는 이유를 설명해주세요.",
    "category": "클라우드",
    "answers": [
      {
        "type": "good",
        "content": "Docker는 애플리케이션을 컨테이너라는 독립된 실행 환경에 패키징하여 실행할 수 있게 해주는 도구입니다. 컨테이너는 이미지 기반으로 동작하며, 필요한 라이브러리와 설정이 포함되어 있어 일관된 실행 환경을 보장합니다. 가상 머신보다 가볍고 빠르며, 개발, 테스트, 배포 환경을 동일하게 유지할 수 있다는 장점이 있습니다."
      },
      {
        "type": "medium",
        "content": "Docker는 애플리케이션을 실행할 수 있는 독립된 공간을 제공해주는 도구입니다. 가상 머신처럼 작동하지만 훨씬 가볍고 빠르다고 들었습니다."
      },
      {
        "type": "bad",
        "content": "Docker는 리눅스에서만 쓸 수 있는 가상 환경이라고 알고 있었어요. 다른 컴퓨터에서도 똑같이 실행된다고는 들었지만, 단순히 앱을 옮기는 도구 정도로 생각했습니다."
      }
    ]
  },
  {
    "question": "CI/CD의 개념과 도입 이유를 설명해주세요.",
    "category": "클라우드",
    "answers": [
      {
        "type": "good",
        "content": "CI는 Continuous Integration의 약자로, 개발자가 작성한 코드를 지속적으로 통합하고 테스트하는 프로세스를 말합니다. CD는 Continuous Deployment 또는 Continuous Delivery의 약자로, 코드를 자동으로 빌드하고 배포하는 과정을 포함합니다. 이를 통해 개발 효율성과 배포 속도를 높일 수 있으며, 오류 발생 가능성도 줄일 수 있습니다."
      },
      {
        "type": "medium",
        "content": "CI/CD는 코드가 푸시될 때마다 자동으로 빌드하고 테스트하고, 서버에 배포까지 할 수 있도록 만들어주는 자동화 과정으로 알고 있습니다."
      },
      {
        "type": "bad",
        "content": "CI/CD는 코드를 자동으로 실행하게 해주는 시스템이라고 들었지만, 빌드와 배포가 정확히 뭔지는 잘 모르겠습니다."
      }
    ]
  }
]